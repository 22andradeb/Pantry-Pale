import json
from datetime import datetime
import tkinter as tk
from tkinter import filedialog, messagebox
import json
import os

# Product class
class Product:
    def __init__(self, name, expiration_date, quantity, nutritional_values=None):
        self.name = name
        self.expiration_date = expiration_date
        self.quantity = quantity
        self.nutritional_values = nutritional_values

    def to_dict(self):
        return vars(self)

    def from_dict(data):
        return Product(data['name'], data['expiration_date'], data['quantity'], data.get('nutritional_values'))

# Global fridge dictionary
my_fridge = {'items': []}

# Function to add items to the fridge
def add_items_to_fridge(items):
    for item in items:
        my_fridge['items'].append(item.to_dict())
    save_fridge_contents()

# Save fridge contents to a file
def save_fridge_contents():
    with open('fridge_contents.json', 'w') as f:
        json.dump(my_fridge, f, default=str)

# Load fridge contents from a file
def load_fridge_contents():
    try:
        with open('fridge_contents.json', 'r') as f:
            global my_fridge
            my_fridge = json.load(f)
    except FileNotFoundError:
        print("No fridge contents found. Starting with an empty fridge.")

# Initialize fridge contents
load_fridge_contents()

# User database (simulated)
user_db = {}

# Attempt to signup a user
def attempt_signup(username, password):
    if username in user_db:
        return False
    else:
        user_db[username] = password
        return True

# GUI Application
class FridgeTrackerApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Fridge Tracker")
        self.geometry("400x300")
        self.create_widgets()

    def create_widgets(self):
        tk.Button(self, text="Signup", command=self.open_signup_window).pack()
        tk.Button(self, text="Add Items to Fridge", command=self.open_add_items_window).pack()
        tk.Button(self, text="View Fridge Contents", command=self.display_fridge_contents).pack()

    def open_signup_window(self):
        signup_window = tk.Toplevel(self)
        signup_window.title("Signup")

        tk.Label(signup_window, text="Username").pack()
        username_entry = tk.Entry(signup_window)
        username_entry.pack()

        tk.Label(signup_window, text="Password").pack()
        password_entry = tk.Entry(signup_window, show="*")
        password_entry.pack()

        tk.Button(signup_window, text="Signup", command=lambda: self.signup(username_entry.get(), password_entry.get(), signup_window)).pack()

    def signup(self, username, password, window):
        if attempt_signup(username, password):
            messagebox.showinfo("Signup", "Signup successful!")
            window.destroy()
        else:
            messagebox.showerror("Signup", "Username already exists.")

    def open_add_items_window(self):
        add_window = tk.Toplevel(self)
        add_window.title("Add Items")

        tk.Label(add_window, text="Product Name").pack()
        name_entry = tk.Entry(add_window)
        name_entry.pack()

        tk.Label(add_window, text="Quantity").pack()
        quantity_entry = tk.Entry(add_window)
        quantity_entry.pack()

        tk.Label(add_window, text="Expiration Date").pack()
        expiration_entry = tk.Entry(add_window)
        expiration_entry.pack()

        tk.Button(add_window, text="Add Item", command=lambda: self.add_item(name_entry.get(), quantity_entry.get(), expiration_entry.get(), add_window)).pack()

    def add_item(self, name, quantity, expiration, window):
        new_item = Product(name, expiration, quantity)
        add_items_to_fridge([new_item])
        messagebox.showinfo("Add Item", f"{name} has been added to your fridge.")
        window.destroy()

    def display_fridge_contents(self):
        contents_window = tk.Toplevel(self)
        contents_window.title("Fridge Contents")

        for item in my_fridge['items']:
            tk.Label(contents_window, text=f"{item['name']}: {item['quantity']} - Expires on {item['expiration_date']}").pack()

if __name__ == "__main__":
    app = FridgeTrackerApp()
    app.mainloop()
